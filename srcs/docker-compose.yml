version: '3.9'
services:
  mariadb:
    container_name: mariadb
    build:
      context: ./requirements/mariadb
      args:
        MYSQL_USER: ${MYSQL_USER}
        MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    restart: always
    env_file: .env
    volumes:
      - db:/var/lib/mysql
    networks:
      - project

  wordpress:
    container_name: wordpress
    build:
      context: ./requirements/wordpress
      args:
        MYSQL_USER: ${MYSQL_USER}
        MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    env_file: .env
    environment:
      - USER="${USER}"
      - MYSQL_USER="${MYSQL_USER}"
      - MYSQL_PASSWORD="${MYSQL_PASSWORD}"
      - MYSQL_HOST="${MYSQL_HOST}"
    volumes:
      - wp:/var/www/html/wordpress
    networks:
      - project
    depends_on:
      - mariadb

  nginx:
    container_name: nginx
    build: ./requirements/nginx
    hostname: localhost
    volumes:
      - wp:/var/www/html/wordpress
    networks:
      - project
    depends_on:
      - wordpress
    ports:
      - "443:443"

  # redis:
  #   build: requirements/bonus/redis
  #   container_name: redis
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - project
  #   restart: always

  # ftp-server:
  #   build: requirements/bonus/ftp-server
  #   container_name: ftp-server
  #   ports:
  #     - "21:21"
  #     - "21100-21110:21100-21110"
  #   volumes:
  #     - wp:/var/www/html/wordpress
  #   networks:
  #    - project
  #   restart: always
  #   environment:
  #     FTP_USR: ${FTP_USR}
  #     FTP_PWD: ${FTP_PWD}

  # portainer:
  # # image указывает образ, с которого будет запускаться контейнер
  #   image: portainer/portainer-ce:latest
  #   container_name: portainer
  #   #  UI over port 9443 and expose a TCP tunnel server over port 8000
  #   ports:
  #     - "8000:8000"
  #     - "9443:9443"
  #   volumes:
  #     - "/etc/localtime:/etc/localtime:ro"
  #     # это сокет Unix, который демон Docker прослушивает по умолчанию, 
  #     # и его можно использовать для связи с демоном из контейнера
  #     - "/var/run/docker.sock:/var/run/docker.sock:ro"
  #     # Отключить процессы-контейнеры от получения новых привилегий
  #     # Это означает, что команды, повышающие привилегии, такие как suили sudo, больше не будут работать
  #   security_opt:
  #     - no-new-privileges:true
  #   restart: always
  
  # # adminer - bring up only as needed - bypasses nginx
  # adminer:
  #   # default port 8080
  #   image: adminer:4
  #   container_name: adminer
  #   # Аналогичен always, за исключением того, что когда контейнер останавливается (вручную или иным образом), 
  #   # он не перезапускается даже после перезапуска демона Docker
  #   restart: unless-stopped
  #   networks:
  #     - project
  #   depends_on:
  #     - mariadb
  #   ports:
  #     - "9000:8080"

volumes:
  db:
    name: db
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/${USER}/data/db
  wp:
    name: wp
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/${USER}/data/wp

networks:
  project:
    driver: bridge